	is_link := {card.card_type == "link monster"}
	is_tw := { styling.language == "chinese traditional" }
	is_cn := { styling.language == "chinese simplified" }
	is_en := { styling.language == "english" }
	is_jp := { styling.language == "japanese" or styling.language == "OCG style english"}
	#Let's place this =true in every template that has pendulum frame together with the card frame.
	is_legacy_pendulum := {false}

	#get_sep := {if is_en() then "<color:black>/</color:black>" else if is_cn() then "<i>／</i>" else "／" }
	get_sep := {if is_en() then "<test>/</test>" else if is_cn() then "<i>／</i>" else "／" }
	get_sepex := {
		class :=remove_tags(input);
		if class == "" then "" else get_sep()
	}


	# the rule text filter
	#  - adds continuous symbols
	#  - adds counter symbols
	#  - adds equipment symbols
	#  - adds field symbols
	#  - adds quickplay symbols
	#  - adds ritual symbols
	#  - adds level symbols
	#  - adds infinity symbols
	#  - makes text in parentheses italic
####################################### Circled Numbers Script
	circled_numbers := 
		# step 1 : remove all automatic tags
		tag_remove_rule(tag: "<sym-auto>") +
		# step 2 : symbols
		replace_rule(
			match: "[|¹|²|³|£|¢|~|?|*|]",
			replace: "<sym-auto>&</sym-auto>" );
####################################### End of circled numbers script
	text_filter := 
		# step 1 : remove all automatic tags
		tag_remove_rule(tag: "<sym-auto>") +
		# step 2 : expand shortcut words ~ and CARDNAME
		replace_rule(
			match: "CARDNAME",
			in_context: "(^|[[:space:]]|\\()<match>", # TODO: Allow any punctuation before
			replace: "<atom-cardname></atom-cardname>"
			) +
		# step 3 : fill in the cardname atom field
		tag_contents_rule(
			tag: "<atom-cardname>",
			contents: { if card.name=="" then "CARDNAME" else card.name }
			) +
		# step 4 : symbols
		replace_rule(
			match: "[|¹|²|³|£|¢|?|*|]",
			replace: "<sym-auto>&</sym-auto>" );
	level_filter := 
		# step 1 : remove all automatic tags
		tag_remove_rule(tag: "<sym-auto>") +
		# step 2 : symbols
		replace_rule(
			match: "[|%|!|+|&|$|#|*|^|]",
			replace: "<sym-auto>&</sym-auto>" );
	a_and_d_filter := 
		# step 1 : remove all automatic tags
		tag_remove_rule(tag: "<sym-auto>") +
		# step 2 : infinity
		replace_rule(
			match: "@",
			replace: "<sym-auto>&</sym-auto>" ) +
		# step 3 : question mark
		replace_rule(
			match: "\\?",
			replace: "<sym-auto>&</sym-auto>" );
	
	# the flavor text filter
	flavor_text_filter :=
		# step 1 : remove italic tags
		tag_remove_rule(tag: "<i-flavor>") +
		# step 2 : surround by <i> tags
		{ "<i-flavor>" + input + "</i-flavor>" };
	
	type_over_list := replace_rule(match:" ?/", replace:"")
	
	monster_type_filter :=
		tag_remove_rule(tag: "<word-list-") +
		type_over_list +
		{ "<word-list-monster>{input}</word-list-monster>" }
	
	space_to_wltags := replace_rule(match:"( +|<soft> </soft>)",
	                                replace:{"</word-list-{list_type}>{_1}<word-list-{list_type}>"})
	
	card_class_filter :=
		tag_remove_rule(tag: "<word-list-") +
		type_over_list +
		{ "<word-list-card>{input}</word-list-card>" }
	
	# Determine type of card
	card_type := {
		if	card.attribute	== "spell"								then "spell card"
		else if	contains(card.level, match:"Spell Card")						then "spell card"
		else if card.attribute	== "trap"								then "trap card"
		else if	contains(card.level, match:"Trap Card")							then "trap card"
		else if	contains(card.monster_type, match:"Link")						then "link monster"
		else if	contains(card.monster_type, match:"Pendulum")						then "pendulum effect monster"
		else if	contains(card.monster_type, match:"Xyz")						then "xyz monster"
		else if	contains(card.monster_type, match:"Dark Synchro")					then "dark synchro monster"
		else if	contains(card.monster_type, match:"Synchro")						then "synchro monster"
		else if	contains(card.monster_type, match:"Fusion")						then "fusion monster"
		else if	contains(card.monster_type, match:"Ritual")						then "ritual monster"
		else if	contains(card.monster_type, match:"Dark Tuner")						then "effect monster"
		else if	contains(card.monster_type, match:"Gemini")						then "effect monster"
		else if	contains(card.monster_type, match:"Union")						then "effect monster"
		else if	contains(card.monster_type, match:"Spirit")						then "effect monster"
		else if	contains(card.monster_type, match:"Toon")						then "effect monster"
		else if	contains(card.monster_type, match:"Flip")						then "effect monster"
		else if	contains(card.monster_type, match:"Effect")						then "effect monster"
		else if contains(card.monster_type, match:"Normal")						then "normal monster"
		else if contains(card.monster_type, match:"Skill")						then "skill card"
		else                                    	 							"normal monster"
	}
	# Default 'attribute' of card
	attribute := {
		if      is_spell_card() then "Spell"
		else if is_trap_card()  then "Trap"
		else                         "none"
	}
	# Default foil for a card
	foil := {
		if	card.rarity == "super rare"	then "holo image"
		else if card.rarity == "ultra rare"	then "holo image"
		else if card.rarity == "secret rare"	then "secret holo image"
		else if card.rarity == "ultimate rare"	then "ultimate holo image"
		else if card.rarity == "parallel rare"	then "parallel holo image"
		else if card.rarity == "gold rare"	then "gold holo image"
		else if card.rarity == "promo"		then "holo image"
		else if card.rarity == "star rare"	then "star holo image"
		else if card.rarity == "mosaic rare"	then "mosaic holo image"
		else					     "none"
	}
	
	############### Type of card
	
	nm_ext_querry := {
		if set.gods_have_effects == "no" then is_normal_monster_extended(value)
		else is_normal_monster(value)
	}
	is_nmonster := {
		card.card_type == "spell card" or
	        card.card_type == "trap card" or
			card.card_type == "conjoint spell card" or
			card.card_type == "conjoint trap card" or
	        card.card_type == "trell card"
	}
	is_monster := {
		card.card_type == "normal monster"          or
		card.card_type == "effect monster"          or
		card.card_type == "ritual monster"          or 
		card.card_type == "synchro monster"         or
		card.card_type == "dark synchro monster"    or
		card.card_type == "xyz monster"             or
		card.card_type == "link monster"             or
		card.card_type == "pendulum normal monster" or
		card.card_type == "pendulum effect monster" or
		card.card_type == "pendulum fusion monster" or
		card.card_type == "pendulum ritual monster" or
		card.card_type == "pendulum synchro monster" or
		card.card_type == "pendulum dark synchro monster" or
		card.card_type == "pendulum xyz monster"    or
		card.card_type == "pandemonium monster" or
		card.card_type == "pendulum normal monster" or
		card.card_type == "pendulum effect monster" or
		card.card_type == "pendulum fusion monster" or
		card.card_type == "pendulum ritual monster" or
		card.card_type == "pendulum synchro monster" or
		card.card_type == "pendulum dark synchro monster" or
		card.card_type == "pendulum xyz monster"    or
		card.card_type == "dlc monster" or
		card.card_type == "fusion monster"          or
		card.card_type == "token monster"           or
		card.card_type == "obelisk card"            or
		card.card_type == "slifer card"             or
		card.card_type == "ra card"
	}
	is_pendulum := {
		contains(card.pendulum, match: "pendulum") or
		contains(card.pendulum, match: "pandemonium")
	}
	is_pandemonium := { contains(card.pendulum, match: "pandemonium") }
	is_normal_monster_extended := {
		card.card_type == "normal monster"
	}
	is_normal_monster := {
		card.card_type == "normal monster"
	}
	is_spell_card := {
		card.card_type == "spell card"	or
		card.attribute == "spell"	or
		card.level     == "Spell"
	}
	is_trap_card := {
	        card.card_type == "trap card"	or
		card.attribute == "trap"	or
		card.level     == "Trap"
	}
	############### Determine Card Position
	
	type_sort := {
		type := card.card_type
		if chosen(choice:"normal monster", type) then "A"
		else if chosen(choice:"effect monster", type) then "B"
		else if chosen(choice:"ritual monster", type) then "C"
		else if chosen(choice:"fusion monster", type) then "D"
		else if chosen(choice:"synchro monster", type) then "E"
		else if chosen(choice:"dark synchro monster", type) then "F"
		else if chosen(choice:"xyz monster", type) then "G"
		else if chosen(choice:"pendulum normal monster", type) then "H"
		else if chosen(choice:"pendulum effect monster", type) then "I"
		else if chosen(choice:"pendulum fusion monster", type) then "J"
		else if chosen(choice:"pendulum ritual monster", type) then "K"
		else if chosen(choice:"pendulum synchro monster", type) then "L"
		else if chosen(choice:"pendulum dark synchro monster", type) then "M"
		else if chosen(choice:"pendulum xyz monster", type) then "N"
		else if chosen(choice:"token monster", type) then "O"
		else if chosen(choice:"obelisk card", type) then "P"
		else if chosen(choice:"slifer card", type) then "Q"
		else if chosen(choice:"ra card", type) then "R"
		else if chosen(choice:"spell card", type) then "S"
		else if chosen(choice:"trap card", type) then "T"
		else "U"
	}
	
	pos_of_card := {
		position(
			of: card
			in: set
			order_by: {
				type_sort() + card.monster_type + card.name + card.attribute
			}) + 1
	}
